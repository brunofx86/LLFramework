Require Export LL.FOLL.Dyadic.Tactics.
Set Implicit Arguments.

Section CutCElimination.
  Context `{OLS: OLSig}.

Theorem CutC i j P Q M N B : CutH (complexity P) (i + j) -> CutW (complexity P) -> S (complexity Q) = complexity P ->
 LL2 i |-- Q::B; M ->
 LL2 j |-- B; (! dual Q)::N ->
 LL2 |-- B; M ++ N.
Proof with sauto; try dualSimpl.   
 intros CH CW Hc Hi Hj.
 inversion Hj...
 * checkPermutationCases H...
 * checkPermutationCases H...
   rewrite H1.
   LL2top (M++x). 
 * checkPermutationCases H...
   rewrite H2.
   LL2plus1 F G (M++x);try solvell2.
   rewrite H in H0.
   putFirst H0 (! Q ^).
   cutH' Hi H0.
   rewrite Permutation_middle...
 * checkPermutationCases H...
   rewrite H2.
   LL2plus2 F G (M++x);try solvell2.
   rewrite H in H0.
   putFirst H0 (! Q ^).
   cutH' Hi H0.
   rewrite Permutation_middle...
 * checkPermutationCases H...
   rewrite H3.
   LL2with F G (M++x);try solvell2.
   rewrite H in H0.
   putFirst H0 (! Q ^).
   cutH' Hi H0.
   rewrite Permutation_middle...
   rewrite H in H1.
   putFirst H1 (! Q ^).
   cutH' Hi H1.
   rewrite Permutation_middle...
 * checkPermutationCases H...
   rewrite H2.
   LL2bot (M++x);try solvell2.
   rewrite H in H0.
   cutH' Hi H0...
 * checkPermutationCases H...
   rewrite H2.
   LL2par F G (M++x);try solvell2.
   rewrite H in H0.
   putFirst H0 (! Q ^).
   cutH' Hi H0.
   rewrite Permutation_middle...   
   rewrite Permutation_middle...    
 * checkPermutationCases H...
   checkPermutationCases H...
   rewrite H3.
   rewrite <- H4.
   LL2tensor F G (M++x0) N0;try solvell2.
   rewrite H in H0.
   putFirst H0 (! Q ^).
   cutH' Hi H0.
   rewrite Permutation_middle...
   rewrite H3.
   rewrite <- H4.
   LL2tensor F G M0 (M++x0);try solvell2.
   rewrite H in H1.
   putFirst H1 (! Q ^).
   cutH' Hi H1.
   rewrite Permutation_middle...
 * checkPermutationCases H...
   rewrite H2.
   LL2store F (M++x);try solvell2.
   rewrite H in H0.
   apply @LL2weakeningN with (F:=F) in Hi.
   rewrite perm_swap in Hi.
   cutH' Hi H0...   
 * inversion Hi...
   - LL2init A.
   - rewrite H.
     LL2top M0.
   - rewrite H.
     LL2plus1 F G M0;try solvell2.
     cutH' H0 Hj...
   - rewrite H.
     LL2plus2 F G M0;try solvell2.
     cutH' H0 Hj...
   - rewrite H.
     LL2with F G M0;try solvell2.
     cutH' H0 Hj...
     cutH' H1 Hj...
   - rewrite H.
     LL2bot M0;try solvell2.
     cutH' H0 Hj...
   - rewrite H.
     LL2par F G M0;try solvell2.
     cutH' H0 Hj...
   - rewrite H.
     LL2tensor F G M0 N;try solvell2.
     cutH' H0 Hj...
     cutH' H1 Hj...
   - rewrite H.
     LL2store F M0;try solvell2.
     rewrite perm_swap in H0.
     apply @LL2weakeningN with (F:=F) in Hj.
     cutH' H0 Hj...
   - eapply ll2_bang'. 
     cutH' H Hj...
   - rewrite H.
     LL2exist t FX M0;try solvell2.
     cutH' H3 Hj...
   - rewrite H.
     LL2forall FX M0;try solvell2.
     apply H1 in H3.
     cutH' H3 Hj...
   - inversion H...
     + cutH' H0 Hj...
       assert(LL2 |-- B; F :: M)...
       apply LL2StoLL2N in H...
       cutW H H2...
     + LL2copy F.
       cutH' H0 Hj...
 * checkPermutationCases H...
   rewrite H4.
   LL2exist t FX (M++x);try solvell2.
   rewrite H in H2.
   putFirst H2 (! Q ^).
   cutH' Hi H2.
   rewrite Permutation_middle...
 * checkPermutationCases H...
   rewrite H3.
   LL2forall FX (M++x);try solvell2.
   specialize (H1 _ H2). 
   rewrite H in H1.
   putFirst H1 (! Q ^).
   cutH' Hi H1.
   rewrite Permutation_middle...
 * LL2copy F. 
   putFirst H0 (! Q ^).
   cutH' Hi H0.
   rewrite Permutation_middle...  
Qed.   

End CutCElimination.
