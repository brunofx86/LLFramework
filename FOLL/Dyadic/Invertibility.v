Require Import LL.FOLL.Dyadic.Tactics.
Set Implicit Arguments.

Section InvRules.
   Context `{OLS: OLSig}.

Lemma invertibility_botN : forall n B M, LL2N n B  (Bot::M) -> LL2N n B  M.
Proof with sauto.
  induction n ;intros...
   - inversion H...
    + checkPermutationCases H0.
    + checkPermutationCases H0.
        LL2top x.
   - inversion H...
    + checkPermutationCases H0.
    + checkPermutationCases H0.
        LL2top x.
    + checkPermutationCases H1.
        LL2plus1 F G x.
        eapply IHn. 
        rewrite perm_swap. rewrite <- H1...
    + checkPermutationCases H1.
        LL2plus2 F G x.
        eapply IHn. 
        rewrite perm_swap. rewrite <- H1...
    + checkPermutationCases H1.
        LL2with F G x.
        1-2: eapply IHn. 
        1-2: rewrite perm_swap. 1-2: rewrite <- H1...
    + checkPermutationCases H1.
        rewrite H4...
        refine (LL2_HeightGeq H2 _)...
        rewrite H3. rewrite <- H1. 
        refine (LL2_HeightGeq H2 _)...
    + checkPermutationCases H1.
        LL2par F G x.
        eapply IHn.
        eapply LL2N_compat with (B1:=B) (L1:=  F :: G ::⊥ :: x)... 
        rewrite <- H1...
   + checkPermutationCases H1.
       checkPermutationCases H1.
        LL2tensor F G x0 N .
        eapply IHn. 
        rewrite perm_swap. rewrite <- H1...
        LL2tensor F G M0 x0 .
        eapply IHn. 
        rewrite perm_swap. rewrite <- H1...
   + checkPermutationCases H1.
        LL2store F x.
        eapply IHn. rewrite <- H1...
   + checkPermutationCases H1.
       LL2exist t FX x. 
        eapply IHn. 
        rewrite perm_swap. rewrite <- H1...
   + checkPermutationCases H1.
       LL2forall FX x. 
        eapply IHn. 
        rewrite perm_swap. rewrite <- H1...
    + LL2copy F.
        eapply IHn. 
        rewrite perm_swap... 
Qed.

Lemma invertibility_parN : forall n B M F G, 
                            LL2N n B  (F ⅋ G::M) -> LL2N n B  (F::G::M).
Proof with sauto.
  induction n ;intros...
   - inversion H...
    + checkPermutationCases H0.
    + checkPermutationCases H0.
        LL2top (F::G::x). rewrite H2...
   - inversion H...
    + checkPermutationCases H0.
    + checkPermutationCases H0.
        LL2top (F::G::x). rewrite H2...
    + checkPermutationCases H1.
        LL2plus1 F0 G0 (F::G::x). rewrite H3...
        eapply LL2N_compat with (B1:=B) (L1:=  F :: G ::F0 :: x)... 
        eapply IHn. 
        rewrite perm_swap. rewrite <- H1...
    + checkPermutationCases H1.
        LL2plus2 F0 G0 (F::G::x). rewrite H3...
        eapply LL2N_compat with (B1:=B) (L1:=  F :: G ::G0 :: x)... 
        eapply IHn. 
        rewrite perm_swap. rewrite <- H1...
    + checkPermutationCases H1.
        LL2with F0 G0 (F::G::x). rewrite H4...
        eapply LL2N_compat with (B1:=B) (L1:=  F :: G ::F0 :: x)... 
        2: eapply LL2N_compat with (B1:=B) (L1:=  F :: G ::G0 :: x)... 
        1-2: eapply IHn. 
        1-2: rewrite perm_swap. 1-2: rewrite <- H1...
    + checkPermutationCases H1.
        LL2bot (F::G::x). rewrite H3...
        eapply IHn. rewrite <- H1... 
    + checkPermutationCases H1.
       { inversion H3...
          rewrite H4.
                  refine (LL2_HeightGeq H2 _)... }
       { LL2par F0 G0 (F::G::x). rewrite H3...
          eapply LL2N_compat with (B1:=B) (L1:=  F :: G ::F0 :: G0::x)... 
          eapply IHn. 
          eapply LL2N_compat with (B1:=B) (L1:=F0 :: G0::(F ⅋ G) ::x)... 
            rewrite <- H1... }
   + checkPermutationCases H1.
       checkPermutationCases H1.
        LL2tensor F0 G0 (F::G::x0) N . rewrite H4... rewrite <- H5...
        eapply LL2N_compat with (B1:=B) (L1:=  F :: G ::F0 ::x0)... 
        eapply IHn. 
        rewrite perm_swap. rewrite <- H1...
        LL2tensor F0 G0 M0 (F::G::x0) . rewrite H4... rewrite <- H5...
        eapply LL2N_compat with (B1:=B) (L1:=  F :: G ::G0 ::x0)... 
        eapply IHn. 
        rewrite perm_swap. rewrite <- H1...
   + checkPermutationCases H1.
        LL2store F0 (F::G::x). rewrite H3...
        eapply IHn. rewrite <- H1...
   + checkPermutationCases H1.
       LL2exist t FX (F::G::x).
       rewrite H5... 
       eapply LL2N_compat with (B1:=B) (L1:=  F :: G ::FX t ::x)... 
         eapply IHn. 
        rewrite perm_swap. rewrite <- H1...
   + checkPermutationCases H1.
       LL2forall FX (F::G::x).
       rewrite H4... 
       eapply LL2N_compat with (B1:=B) (L1:=  F :: G ::FX x0 ::x)... 
         eapply IHn. 
        rewrite perm_swap. rewrite <- H1...
   + LL2copy F0.
        eapply LL2N_compat with (B1:=B) (L1:=  F :: G ::F0 ::M)... 
        eapply IHn.
        rewrite perm_swap... 
Qed.


Lemma invertibility_storeN : forall n B M F,
                            LL2N n B  (? F::M) -> LL2N n (F::B)  M.
Proof with sauto.
  induction n ;intros...
   - inversion H...
    + checkPermutationCases H0.
    + checkPermutationCases H0.
        LL2top x.
   - inversion H...
    + checkPermutationCases H0.
    + checkPermutationCases H0.
        LL2top x. 
    + checkPermutationCases H1.
        LL2plus1 F0 G x. 
        eapply IHn. 
        rewrite perm_swap. rewrite <- H1...
    + checkPermutationCases H1.
        LL2plus2 F0 G x.  
        eapply IHn. 
        rewrite perm_swap. rewrite <- H1...
    + checkPermutationCases H1.
        LL2with F0 G x.  
        1-2: eapply IHn. 
        1-2: rewrite perm_swap. 1-2: rewrite <- H1...
    + checkPermutationCases H1.
        LL2bot x. 
        eapply IHn. rewrite <- H1... 
    + checkPermutationCases H1.
        LL2par F0 G x.  
          eapply IHn. 
          eapply LL2N_compat with (B1:=B) (L1:=F0 :: G:: ? F::x)... 
            rewrite <- H1... 
   + checkPermutationCases H1.
       checkPermutationCases H1.
        LL2tensor F0 G x0 N .  
        eapply IHn. 
        rewrite perm_swap. rewrite <- H1...
        apply LL2weakeningN...
        LL2tensor F0 G M0 x0 . 
        apply LL2weakeningN...
        eapply IHn. 
        rewrite perm_swap. rewrite <- H1...
   + checkPermutationCases H1.
       { inversion H3...
          rewrite H4.
         refine (LL2_HeightGeq H2 _)...  }
       { LL2store F0 x.
         rewrite perm_swap. 
          eapply IHn. 
            rewrite <- H1... }
   + checkPermutationCases H1.
       LL2exist t FX x.
         eapply IHn. 
        rewrite perm_swap. rewrite <- H1...
   + checkPermutationCases H1.
       LL2forall FX x.
         eapply IHn. 
        rewrite perm_swap. rewrite <- H1...
    + LL2copy F0...
        eapply IHn.
        rewrite perm_swap... 
Qed.
   

Lemma invertibility_withN : forall n B M F G, 
     LL2N n B (F & G::M) -> LL2N n B (F::M) /\ LL2N n B (G::M).
Proof with sauto.
  induction n ;intros...
   - inversion H...
    + checkPermutationCases H0.
    + checkPermutationCases H0.
        LL2top (F::x). rewrite H2...
   - inversion H...
    + checkPermutationCases H0.
    + checkPermutationCases H0.
        LL2top (G::x). rewrite H2...
   - inversion H...
    + checkPermutationCases H0.
    + checkPermutationCases H0.
        LL2top (F::x). rewrite H2...
    + checkPermutationCases H1.
        LL2plus1 F0 G0 (F::x). rewrite H3...
        rewrite perm_swap.
        eapply IHn with (F:=F) (G:=G). 
        rewrite perm_swap. rewrite <- H1...
    + checkPermutationCases H1.
        LL2plus2 F0 G0 (F::x). rewrite H3...
        rewrite perm_swap.
        eapply IHn with (F:=F) (G:=G). 
        rewrite perm_swap. rewrite <- H1...
    + checkPermutationCases H1.
       { inversion H4...
          rewrite H5. refine (LL2_HeightGeq H2 _)...   }
       { LL2with F0 G0 (F::x). rewrite H4...
         rewrite perm_swap.
         eapply IHn with (F:=F) (G:=G). 
         rewrite perm_swap. rewrite <- H1...
         rewrite perm_swap.
         eapply IHn with (F:=F) (G:=G). 
         rewrite perm_swap. rewrite <- H1... }
    + checkPermutationCases H1.
        LL2bot (F::x). rewrite H3...
        eapply IHn with (F:=F) (G:=G). 
         rewrite <- H1... 
    + checkPermutationCases H1.
       LL2par F0 G0 (F::x). rewrite H3...
        eapply LL2N_compat with (B1:=B) (L1:=  F :: F0 :: G0::x)... 
        eapply IHn with (F:=F) (G:=G). 
          eapply LL2N_compat with (B1:=B) (L1:=F0 :: G0::(F & G) ::x)... 
            rewrite <- H1... 
   + checkPermutationCases H1.
       checkPermutationCases H1.
        LL2tensor F0 G0 (F::x0) N . rewrite H4... rewrite <- H5...
        rewrite perm_swap.  
        eapply IHn with (F:=F) (G:=G). 
        rewrite perm_swap. rewrite <- H1...
        LL2tensor F0 G0 M0 (F::x0) . rewrite H4... rewrite <- H5...
        rewrite perm_swap.  
        eapply IHn with (F:=F) (G:=G). 
        rewrite perm_swap. rewrite <- H1...
   + checkPermutationCases H1.
        LL2store F0 (F::x). rewrite H3...
        eapply IHn with (F:=F) (G:=G). 
        rewrite <- H1...
   + checkPermutationCases H1.
       LL2exist t FX (F::x).
       rewrite H5... 
        rewrite perm_swap. 
        eapply IHn with (F:=F) (G:=G). 
        rewrite perm_swap. rewrite <- H1...
   + checkPermutationCases H1.
       LL2forall FX (F::x).
       rewrite H4... 
        rewrite perm_swap. 
        eapply IHn with (F:=F) (G:=G). 
        rewrite perm_swap. rewrite <- H1...

   + LL2copy F0.
      rewrite perm_swap.  
        eapply IHn with (F:=F) (G:=G).
        rewrite perm_swap...
   - inversion H...
    + checkPermutationCases H0.
    + checkPermutationCases H0.
        LL2top (G::x). rewrite H2...
    + checkPermutationCases H1.
        LL2plus1 F0 G0 (G::x). rewrite H3...
        rewrite perm_swap.
        eapply IHn with (F:=F) (G:=G). 
        rewrite perm_swap. rewrite <- H1...
    + checkPermutationCases H1.
        LL2plus2 F0 G0 (G::x). rewrite H3...
        rewrite perm_swap.
        eapply IHn with (F:=F) (G:=G). 
        rewrite perm_swap. rewrite <- H1...
    + checkPermutationCases H1.
       { inversion H4...
          rewrite H5. refine (LL2_HeightGeq H3 _)... }  
       { LL2with F0 G0 (G::x). rewrite H4...
         rewrite perm_swap.
         eapply IHn with (F:=F) (G:=G). 
         rewrite perm_swap. rewrite <- H1...
         rewrite perm_swap.
         eapply IHn with (F:=F) (G:=G). 
         rewrite perm_swap. rewrite <- H1... }
    + checkPermutationCases H1.
        LL2bot (G::x). rewrite H3...
        eapply IHn with (F:=F) (G:=G). 
         rewrite <- H1... 
    + checkPermutationCases H1.
       LL2par F0 G0 (G::x). rewrite H3...
        eapply LL2N_compat with (B1:=B) (L1:=  G :: F0 :: G0::x)... 
        eapply IHn with (F:=F) (G:=G). 
          eapply LL2N_compat with (B1:=B) (L1:=F0 :: G0::(F & G) ::x)... 
            rewrite <- H1... 
   + checkPermutationCases H1.
       checkPermutationCases H1.
        LL2tensor F0 G0 (G::x0) N . rewrite H4... rewrite <- H5...
        rewrite perm_swap.  
        eapply IHn with (F:=F) (G:=G). 
        rewrite perm_swap. rewrite <- H1...
        LL2tensor F0 G0 M0 (G::x0) . rewrite H4... rewrite <- H5...
        rewrite perm_swap.  
        eapply IHn with (F:=F) (G:=G). 
        rewrite perm_swap. rewrite <- H1...
   + checkPermutationCases H1.
        LL2store F0 (G::x). rewrite H3...
        eapply IHn with (F:=F) (G:=G). 
        rewrite <- H1...
   + checkPermutationCases H1.
       LL2exist t FX (G::x).
       rewrite H5... 
        rewrite perm_swap. 
        eapply IHn with (F:=F) (G:=G). 
        rewrite perm_swap. rewrite <- H1...
   + checkPermutationCases H1.
       LL2forall FX (G::x).
       rewrite H4... 
        rewrite perm_swap. 
        eapply IHn with (F:=F) (G:=G). 
        rewrite perm_swap. rewrite <- H1...

   + LL2copy F0.
      rewrite perm_swap.  
        eapply IHn with (F:=F) (G:=G).
        rewrite perm_swap...
Qed.

Lemma invertibility_forallN : forall n B FX M, 
     LL2N n B (∀{ FX}::M) -> (forall x : expr con, proper x -> LL2N n B (FX x :: M)).
Proof with sauto.
  induction n ;intros...
   - inversion H...
    + checkPermutationCases H1.
    + checkPermutationCases H1.
        LL2top (FX x::x0). rewrite H3...
   - inversion H...
    + checkPermutationCases H1.
    + checkPermutationCases H1.
        LL2top (FX x::x0). rewrite H3...
    + checkPermutationCases H2.
        LL2plus1 F G (FX x::x0). rewrite H4...
        rewrite perm_swap.
        eapply IHn... 
        rewrite perm_swap. rewrite <- H2...
    + checkPermutationCases H2.
        LL2plus2 F G (FX x::x0). rewrite H4...
        rewrite perm_swap.
        eapply IHn... 
        rewrite perm_swap. rewrite <- H2...
    + checkPermutationCases H2.
         LL2with F G (FX x::x0). rewrite H5...
         rewrite perm_swap.
         eapply IHn... 
         rewrite perm_swap. rewrite <- H2...
         rewrite perm_swap.
         eapply IHn...  
         rewrite perm_swap. rewrite <- H2... 
    + checkPermutationCases H2.
        LL2bot (FX x::x0). rewrite H4...
        eapply IHn... 
         rewrite <- H2... 
    + checkPermutationCases H2.
       LL2par F G (FX x::x0). rewrite H4...
        eapply LL2N_compat with (B1:=B) (L1:=  FX x :: F :: G::x0)... 
        eapply IHn... 
          eapply LL2N_compat with (B1:=B) (L1:=F:: G::∀{ FX} ::x0)... 
            rewrite <- H2... 
   + checkPermutationCases H2.
       checkPermutationCases H2.
        LL2tensor F G (FX x::x1) N . rewrite H5... rewrite <- H6...
        rewrite perm_swap.  
        eapply IHn... 
        rewrite perm_swap. rewrite <- H2...
        LL2tensor F G M0 (FX x::x1) . rewrite H5... rewrite <- H6...
        rewrite perm_swap.  
        eapply IHn...  
        rewrite perm_swap. rewrite <- H2...
   + checkPermutationCases H2.
        LL2store F (FX x::x0). rewrite H4...
        eapply IHn... 
        rewrite <- H2...
   + checkPermutationCases H2.
       LL2exist t FX0 (FX x::x0).
       rewrite H6... 
        rewrite perm_swap. 
        eapply IHn...  
        rewrite perm_swap. rewrite <- H2...
   + checkPermutationCases H2.
       { inversion H5...
          pose proof (H4 x H0).
          rewrite H6... refine (LL2_HeightGeq H1 _)...  }
       {    LL2forall FX0 (FX x::x0).
       rewrite H5... 
        rewrite perm_swap. 
        eapply IHn...  
        rewrite perm_swap. rewrite <- H2... }
   + LL2copy F.
      rewrite perm_swap.  
        eapply IHn...
        rewrite perm_swap...
Qed.
   
End InvRules.
