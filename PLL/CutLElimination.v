Require Export LL.PLL.Tactics.
Set Implicit Arguments.

Section CutLElimination.
 
Tactic Notation "cutH2" constr(P1) constr(P2) :=
   let tP1 := type of P1 in
   let H' := fresh "HCUT" in
   match tP1 with
   | LL2N ?x ?BX (?CF::?CX) => let tP2 := type of P2 in
                    match tP2 with 
                    | LL2N ?y ?BX (_::?CY) =>  
                           assert(H': tP1 -> tP2 -> LL2S BX (CX++CY));
                           applyCutH; try rewrite app_nil_r in H' 
                    | _ => idtac "type of " P2 " is " tP2 end
   | LL2N ?x ?BX (?NF::?CF::?CX2) => let tP2 := type of P2 in
                    match tP2 with 
                    | LL2N ?y ?BX (_::?CY) =>  
                           assert(LL2N x BX (CF::(NF++CX2)) -> tP2 -> LL2S BX ((NF::CX2)++CY));  applyCutH; try rewrite app_nil_r in H' 
                    | _ => idtac "type of " P2 " is " tP2 end
   
   | _ => idtac "type of " P1 " is " tP1 end.                 

   
Theorem CutL i j C M N B : CutH (complexity C) (i+j) -> CutW (complexity C ) ->
 LL2 i |-- B; C::M ->
 LL2 j |-- B; (dual C)::N ->
 LL2 |-- B; M ++ N.
Proof with sauto; try dualSimpl.   
 intros CH CW Hi Hj.
 inversion Hi;subst.
 * checkPermutationCases H...
   solvell2.
   inversion H...
   solvell2.
 * inversion Hj...
   - checkPermutationCases H.
   - checkPermutationCases H.
     rewrite H1.
     LL2top x.
   - checkPermutationCases H.
     rewrite H2.
     LL2plus1 F G x;try solvell2.
     rewrite H in H0.
     putFirst H0 Bot.
     cutH2 H0 Hi...
   - checkPermutationCases H.
     rewrite H2.
     LL2plus2 F G x;try solvell2.
     rewrite H in H0.
     putFirst H0 Bot.
     cutH H0 Hi...
   - checkPermutationCases H.
     rewrite H3.
     LL2with F G x;try solvell2.
     rewrite H in H0.
     putFirst H0 Bot.
     cutH H0 Hi...
     rewrite H in H1.
     putFirst H1 Bot.
     cutH H1 Hi...
   - checkPermutationCases H.
     rewrite H3.
     solvell2.
     rewrite H2.
     LL2bot x;try solvell2.
     rewrite H in H0.
     cutH H0 Hi... exact Bot.
   - checkPermutationCases H.
     rewrite H2.
     LL2par F G x;try solvell2.
     rewrite H in H0.
     putFirst H0 Bot.
     cutH H0 Hi...        
   - checkPermutationCases H.
     checkPermutationCases H.
     rewrite H3.
     rewrite <- H4.
     LL2tensor F G x0 N0;try solvell2.
     rewrite H in H0. 
     putFirst H0 Bot. 
     cutH H0 Hi... 
     rewrite H3.
     rewrite <- H4.
     LL2tensor F G M x0;try solvell2.
     rewrite H in H1.
     putFirst H1 Bot.
     cutH H1 Hi...
   - checkPermutationCases H.
     rewrite H2.
     LL2store F x;try solvell2.
     rewrite H in H0.
     assert(LL2 n |-- F::B; Bot::x ->
            LL2 i |-- F::B; [One] ->
            LL2 |-- F::B; x++[]).
     eapply CH...
     rewrite app_nil_r in H1. 
     apply H1...
   - LL2copy F.
     simpl in H0.
     putFirst H0 Bot.
     cutH H0 Hi...
 * checkPermutationCases H...
 
   2:{ rewrite H1.
       rewrite <- app_comm_cons...
       LL2top (x++N). }
   clear H2.
   inversion Hj...
     + checkPermutationCases H.
     + checkPermutationCases H.
       rewrite H1.
       LL2top (M++x).
     + checkPermutationCases H.
       rewrite H2.
       LL2plus1 F G (M++x).
       rewrite H in H0...
       putFirst H0 Zero. 
       cutH Hi H0...
       rewrite <- Permutation_midle...
     + checkPermutationCases H.
       rewrite H2.
       LL2plus2 F G (M++x).
       rewrite H in H0...
       putFirst H0 Zero. 
       cutH Hi H0...
       rewrite <- Permutation_midle...
     + checkPermutationCases H.
       rewrite H3.
       LL2with F G (M++x).
       rewrite H in H0.
       putFirst H0 Zero.
       cutH Hi H0...
       rewrite <- Permutation_midle...
       rewrite H in H1.
       putFirst H1 Zero.
       cutH Hi H1...
       rewrite <- Permutation_midle...
     + checkPermutationCases H.
       rewrite H2.
       LL2bot (M++x).
       rewrite H in H0...
       cutH Hi H0...
       exact Zero.
     + checkPermutationCases H.
       rewrite H2. 
       LL2par F G (M++x).
       rewrite H in H0.
       putFirst H0 Zero. 
       cutH Hi H0...
       rewrite <- Permutation_midle.
       rewrite <- Permutation_midle...
     + checkPermutationCases H.
       checkPermutationCases H.
       rewrite H3.
       rewrite <- H4.
       LL2tensor F G (M++x0) N0;try solvell2.
       rewrite H in H0...
       putFirst H0 Zero.
       cutH Hi H0...
       rewrite <- Permutation_midle...
     
       rewrite H3.
       rewrite <- H4.
       LL2tensor F G M1 (M++x0);try solvell2.
       rewrite H in H1...
       putFirst H1 Zero.
       cutH Hi H1...
       rewrite <- Permutation_midle...
     + checkPermutationCases H.
       rewrite H2.
       LL2store F (M++x).
       rewrite H in H0.
       assert(LL2 i |-- F::B; Top :: M ->
            LL2 n |-- F::B; Top^::x ->
            LL2 |-- F::B; M++x).
       eapply CH ...
       apply H1...
       apply LL2weakeningN...
     + LL2copy F.
       putFirst H0 (dual Top).
       cutH Hi H0...
       rewrite <- Permutation_midle...
 * checkPermutationCases H...
 
   2:{ rewrite H2.
       LL2plus1 F G (x++N).
       rewrite H in H0.
       putFirst H0 C.
       cutH H0 Hj... }
   rewrite <- H3 in H0.
   clear H3.
   inversion Hj...
     + checkPermutationCases H.
     + checkPermutationCases H.
       rewrite H2.
       LL2top (M++x).   
     + checkPermutationCases H.
       rewrite H3.
       LL2plus1 F0 G0 (M++x).
       rewrite H in H1...
       putFirst H1 (F ^ & G ^).
       cutH Hi H1...
       rewrite <- Permutation_midle...
     + checkPermutationCases H.
       rewrite H3.
       LL2plus2 F0 G0 (M++x).
       rewrite H in H1...
       putFirst H1 (F ^ & G ^).
       cutH Hi H1...
       rewrite <- Permutation_midle...
     + checkPermutationCases H.
       inversion H4... 
       rewrite H5.
       cutW H0 H1...
       simpl...
       rewrite H4.
       LL2with F0 G0 (M++x).
       rewrite H in H1.
       putFirst H1 (F ^ & G ^).
       cutH Hi H1...
       rewrite <- Permutation_midle...
       rewrite H in H2.
       putFirst H2 (F ^ & G ^).
       cutH Hi H2...
       rewrite <- Permutation_midle...     
     + checkPermutationCases H.
       rewrite H3.
       LL2bot (M++x).
       rewrite H in H1...
       cutH Hi H1...   
     + checkPermutationCases H.
       rewrite H3. 
       LL2par F0 G0 (M++x).
       rewrite H in H1.
       putFirst H1 (F ^ & G ^).
       cutH Hi H1...
       rewrite <- Permutation_midle.
       rewrite <- Permutation_midle...
     + checkPermutationCases H.
       checkPermutationCases H.
       rewrite H4.
       rewrite <- H5.
       LL2tensor F0 G0 (M++x0) N0;try solvell2.
       rewrite H in H1...
       putFirst H1 (F ^ & G ^).
       cutH Hi H1...
       rewrite <- Permutation_midle...
     
       rewrite H4.
       rewrite <- H5.
       LL2tensor F0 G0 M1 (M++x0);try solvell2.
       rewrite H in H2...
       putFirst H2 (F ^ & G ^).
       cutH Hi H2...
       rewrite <- Permutation_midle...
    + checkPermutationCases H.
       rewrite H3.
       LL2store F0 (M++x).
       rewrite H in H1.
       assert(LL2 S n |-- F0::B; (F ⊕ G) :: M ->
            LL2 n0 |-- F0::B; (F ⊕ G)^::x ->
            LL2 |-- F0::B; M++x).
       eapply CH...
       apply H2...
       apply LL2weakeningN...
     + LL2copy F0.
       putFirst H1 (dual (F ⊕ G)).
       cutH Hi H1...
       rewrite <- Permutation_midle...
* checkPermutationCases H...
 
   2:{ rewrite H2.
       LL2plus2 F G (x++N).
       rewrite H in H0.
       putFirst H0 C.
       cutH H0 Hj... }
   rewrite <- H3 in H0.
   clear H3.
   inversion Hj...
     + checkPermutationCases H.
     + checkPermutationCases H.
       rewrite H2.
       LL2top (M++x).   
     + checkPermutationCases H.
       rewrite H3.
       LL2plus1 F0 G0 (M++x).
       rewrite H in H1...
       putFirst H1 (F ^ & G ^).
       cutH Hi H1...
       rewrite <- Permutation_midle...
     + checkPermutationCases H.
       rewrite H3.
       LL2plus2 F0 G0 (M++x).
       rewrite H in H1...
       putFirst H1 (F ^ & G ^).
       cutH Hi H1...
       rewrite <- Permutation_midle...
     + checkPermutationCases H.
       inversion H4... 
       rewrite H5.
       cutW H0 H2...
       simpl...
       rewrite H4.
       LL2with F0 G0 (M++x).
       rewrite H in H1.
       putFirst H1 (F ^ & G ^).
       cutH Hi H1...
       rewrite <- Permutation_midle...
       rewrite H in H2.
       putFirst H2 (F ^ & G ^).
       cutH Hi H2...
       rewrite <- Permutation_midle...     
     + checkPermutationCases H.
       rewrite H3.
       LL2bot (M++x).
       rewrite H in H1...
       cutH Hi H1...   
     + checkPermutationCases H.
       rewrite H3. 
       LL2par F0 G0 (M++x).
       rewrite H in H1.
       putFirst H1 (F ^ & G ^).
       cutH Hi H1...
       rewrite <- Permutation_midle.
       rewrite <- Permutation_midle...
     + checkPermutationCases H.
       checkPermutationCases H.
       rewrite H4.
       rewrite <- H5.
       LL2tensor F0 G0 (M++x0) N0;try solvell2.
       rewrite H in H1...
       putFirst H1 (F ^ & G ^).
       cutH Hi H1...
       rewrite <- Permutation_midle...
     
       rewrite H4.
       rewrite <- H5.
       LL2tensor F0 G0 M1 (M++x0);try solvell2.
       rewrite H in H2...
       putFirst H2 (F ^ & G ^).
       cutH Hi H2...
       rewrite <- Permutation_midle...
    + checkPermutationCases H.
       rewrite H3.
       LL2store F0 (M++x).
       rewrite H in H1.
       assert(LL2 S n |-- F0::B; (F ⊕ G) :: M ->
            LL2 n0 |-- F0::B; (F ⊕ G)^::x ->
            LL2 |-- F0::B; M++x).
       eapply CH...
       apply H2...
       apply LL2weakeningN...
     + LL2copy F0.
       putFirst H1 (dual (F ⊕ G)).
       cutH Hi H1...
       rewrite <- Permutation_midle...
 * checkPermutationCases H...
 
   2:{ rewrite H3.
       LL2with F G (x++N).
       rewrite H in H0.
       putFirst H0 C.
       cutH H0 Hj...
       rewrite H in H1.
       putFirst H1 C.
       cutH H1 Hj... }
   rewrite <- H4 in H0.
   rewrite <- H4 in H1.
   clear H4.
   inversion Hj...
     + checkPermutationCases H.
     + checkPermutationCases H.
       rewrite H3.
       LL2top (M++x).     
     + checkPermutationCases H.
       inversion H4...
       cutW H0 H2...
       simpl...
       rewrite H5...
       rewrite H4.
       LL2plus1 F0 G0 (M++x).
       rewrite H in H2...
       putFirst H2 (F ^ ⊕ G ^).
       cutH Hi H2...
       rewrite <- Permutation_midle...
     + checkPermutationCases H.
       inversion H4...
       cutW H1 H2...
       simpl...
       rewrite H5...
       rewrite H4.
       LL2plus2 F0 G0 (M++x).
       rewrite H in H2...
       putFirst H2 (F ^ ⊕ G ^).
       cutH Hi H2...
       rewrite <- Permutation_midle...
     + checkPermutationCases H.
       rewrite H5.
       LL2with F0 G0 (M++x).
       rewrite H in H2.
       putFirst H2 (F ^ ⊕ G ^).
       cutH Hi H2...
       rewrite <- Permutation_midle...
       rewrite H in H3.
       putFirst H3 (F ^ ⊕ G ^).
       cutH Hi H3...
       rewrite <- Permutation_midle...    
     + checkPermutationCases H.
       rewrite H4.
       LL2bot (M++x).
       rewrite H in H2...
       cutH Hi H2...
     + checkPermutationCases H.
       rewrite H4. 
       LL2par F0 G0 (M++x).
       rewrite H in H2.
       putFirst H2 (F ^ ⊕ G ^).
       cutH Hi H2...
       rewrite <- Permutation_midle.
       rewrite <- Permutation_midle...
     + checkPermutationCases H.
       checkPermutationCases H.
       rewrite H5.
       rewrite <- H6.
       LL2tensor F0 G0 (M++x0) N0;try solvell2.
       rewrite H in H2.
       putFirst H2 (F ^ ⊕ G ^).
       cutH Hi H2...
       rewrite <- Permutation_midle...
       rewrite H5.
       rewrite <- H6.
       LL2tensor F0 G0  M1 (M++x0);try solvell2.
       rewrite H in H3.
       putFirst H3 (F ^ ⊕ G ^).
       cutH Hi H3...
       rewrite <- Permutation_midle...
     + checkPermutationCases H.
       rewrite H4.
       LL2store F0 (M++x).
       rewrite H in H2.
       assert(LL2 S n |-- F0::B; (F & G) :: M ->
            LL2 n0 |-- F0::B; (F & G)^::x ->
            LL2 |-- F0::B; M++x).
       eapply CH...
       apply H3...
       apply LL2weakeningN...
     + LL2copy F0.
       putFirst H2 (dual (F & G)).
       cutH Hi H2...
       rewrite <- Permutation_midle...
 * checkPermutationCases H...
   
   2:{ rewrite H2.
       LL2bot (x++N).
       rewrite H in H0.
       cutH H0 Hj... }
       
   rewrite <- H3 in H0.
   clear H3.
   inversion Hj...
     + checkPermutationCases H.
     + solvell2.
     + checkPermutationCases H.
       rewrite H2.
       LL2top (M++x).
     + checkPermutationCases H.
       rewrite H3.
       LL2plus1 F G (M++x).
       rewrite H in H1...
       putFirst H1 One.
       cutH Hi H1...
       rewrite <- Permutation_midle...
     + checkPermutationCases H.
       rewrite H3.
       LL2plus2 F G (M++x).
       rewrite H in H1...
       putFirst H1 One.
       cutH Hi H1...
       rewrite <- Permutation_midle...
     + checkPermutationCases H.
       rewrite H4.
       LL2with F G (M++x).
       rewrite H in H1.
       putFirst H1 One.
       cutH Hi H1...
       rewrite <- Permutation_midle...
       rewrite H in H2.
       putFirst H2 One.
       cutH Hi H2...
       rewrite <- Permutation_midle...          
     + checkPermutationCases H.
       rewrite H3.
       LL2bot (M++x).
       rewrite H in H1...
       cutH Hi H1... exact Bot.
     + checkPermutationCases H.
       rewrite H3. 
       LL2par F G (M++x).
       rewrite H in H1.
       putFirst H1 One.
       cutH Hi H1...
       rewrite <- Permutation_midle.
       rewrite <- Permutation_midle...      
     + checkPermutationCases H.
       checkPermutationCases H.
       rewrite H4.
       rewrite <- H5.
       LL2tensor F G (M++x0) N0;try solvell2.
       rewrite H in H1...
       putFirst H1 One.
       cutH Hi H1...
       rewrite <- Permutation_midle...
     
       rewrite H4.
       rewrite <- H5.
       LL2tensor F G M1 (M++x0);try solvell2.
       rewrite H in H2...
       putFirst H2 One.
       cutH Hi H2...
       rewrite <- Permutation_midle...
     + checkPermutationCases H.
       rewrite H3.
       LL2store F (M++x).
       rewrite H in H1.
       assert(LL2 S n |-- F::B; Bot :: M ->
            LL2 n0 |-- F::B; Bot^::x ->
            LL2 |-- F::B; M++x).
       eapply CH...
       apply H2...
       apply LL2weakeningN...
     + LL2copy F.
       putFirst H1 (dual Bot).
       cutH Hi H1...
       rewrite <- Permutation_midle...
 
 * checkPermutationCases H.
   - inversion Hj...
     + checkPermutationCases H.
     + checkPermutationCases H.
        rewrite H2.
        LL2top (M++x).
    + checkPermutationCases H.
        rewrite H4.
        LL2plus1 F0 G0 (M++x).
        rewrite H in H1...
        putFirst H1 (F ^ ⊗ G ^).
        cutH Hi H1...
       rewrite <- Permutation_midle...
    + checkPermutationCases H.
       rewrite H4.
       LL2plus2 F0 G0 (M++x).
       rewrite H in H1...
       putFirst H1 (F ^ ⊗ G ^).
       cutH Hi H1...
       rewrite <- Permutation_midle...
    + checkPermutationCases H.
       rewrite H5.
       LL2with F0 G0 (M++x).
       rewrite H in H1.
       putFirst H1 (F ^ ⊗ G ^).
       cutH Hi H1...
       rewrite <- Permutation_midle...
       rewrite H in H2.
       putFirst H2 (F ^ ⊗ G ^).
       cutH Hi H2...
       rewrite <- Permutation_midle...
     + checkPermutationCases H.
       rewrite H4.
       LL2bot (M++x).
       rewrite H in H1...
       cutH Hi H1...
     + checkPermutationCases H.
       rewrite H4. 
       LL2par F0 G0 (M++x).
       rewrite H in H1.
       putFirst H1 (F ^ ⊗ G ^).
       cutH Hi H1...
       rewrite <- Permutation_midle.
       rewrite <- Permutation_midle...
   + checkPermutationCases H.
       inversion H5...
       rewrite H6.

       assert(LL2 n |-- B; F ::(G ::M) ->
              LL2 n0 |-- B; F ^ :: M1 ->
              LL2 |-- B; (G ::M)++M1).
       eapply CW...
       simpl... 
       assert(LL2 |-- B; (G :: M) ++ M1).
       apply H...
       rewrite H3...
       apply LL2StoLL2N in H4...
       rewrite <- app_comm_cons in H4.
       cutW H4 H2...
       simpl...
       rewrite app_assoc. 
       apply WCUT...
       
       checkPermutationCases H.
       rewrite H5.
       rewrite <- H6.
       LL2tensor F0 G0 (M++x0) N0;try solvell2.
       rewrite H in H1...
       putFirst H1 (F ^ ⊗ G ^).
       cutH Hi H1...
       rewrite <- Permutation_midle...
     
       rewrite H5.
       rewrite <- H6.
       LL2tensor F0 G0 M1 (M++x0);try solvell2.
       rewrite H in H2...
       putFirst H2 (F ^ ⊗ G ^).
       cutH Hi H2...
       rewrite <- Permutation_midle...
     + checkPermutationCases H.
       rewrite H4.
       LL2store F0 (M++x).
       rewrite H in H1.
       assert(LL2 S n |-- F0::B; (F ⅋  G) :: M ->
            LL2 n0 |-- F0::B; (F ⅋  G)^::x ->
            LL2 |-- F0::B; M++x).
       eapply CH... 
       apply H2...
       apply LL2weakeningN...
      + LL2copy F0.
       putFirst H1 (dual (F ⅋ G)).
       cutH Hi H1...
       rewrite <- Permutation_midle...
   -  rewrite H2.
       LL2par F G (x++N).
       rewrite H in H0.
       putFirst H0 C.
       cutH H0 Hj...
    * checkPermutationCases H. 
      inversion Hj...
     + checkPermutationCases H.
     + checkPermutationCases H.
         rewrite H3.
         LL2top (M++x).
     + checkPermutationCases H.
       rewrite H5.
       LL2plus1 F0 G0 (M++x).
       rewrite H in H2...
       putFirst H2 (F ^ ⅋ G ^).
       cutH Hi H2...
       rewrite <- Permutation_midle...
     + checkPermutationCases H.
       rewrite H5.
       LL2plus2 F0 G0 (M++x).
       rewrite H in H2...
       putFirst H2 (F ^ ⅋ G ^).
       cutH Hi H2...
       rewrite <- Permutation_midle...
     + checkPermutationCases H.
       rewrite H6.
       LL2with F0 G0 (M++x).
       rewrite H in H2.
       putFirst H2 (F ^ ⅋ G ^).
       cutH Hi H2...
       rewrite <- Permutation_midle...
       
       rewrite H in H3.
       putFirst H3 (F ^ ⅋ G ^).
       cutH Hi H3...
       rewrite <- Permutation_midle...       
       + checkPermutationCases H.
       rewrite H5.
       LL2bot (M++x).
       rewrite H in H2...
       cutH Hi H2...
      + checkPermutationCases H.
       inversion H5...
       rewrite H6.
       rewrite H4.
       
       assert(LL2 n |-- B; F :: M0 ->
            LL2 n0 |-- B; F ^::(G ^::M1) ->
            LL2 |-- B; M0++(G ^::M1)).
       eapply CW...
       simpl... 
       assert(LL2 |-- B; M0 ++ G ^ :: M1).
       apply H...
       apply LL2StoLL2N in H3...
       rewrite <- Permutation_middle in H3.
       cutW H1 H3...
       simpl...
       rewrite (Permutation_app_comm M0).
       rewrite app_assoc_reverse.
       apply WCUT...
       
       rewrite H5.
       LL2par F0 G0 (M++x).
       rewrite H in H2.
       putFirst H2 (F ^ ⅋ G ^).
       cutH Hi H2...
       rewrite <- Permutation_midle.
       rewrite <- Permutation_midle...
            
     + checkPermutationCases H.
       checkPermutationCases H.
       rewrite H6.
       rewrite <- H7.
       LL2tensor F0 G0 (M++x0) N1;try solvell2.
       rewrite H in H2...
       putFirst H2 (F ^ ⅋ G ^).
       cutH Hi H2...
       rewrite <- Permutation_midle...
     
       rewrite H6.
       rewrite <- H7.
       LL2tensor F0 G0 M1 (M++x0);try solvell2.
       rewrite H in H3...
       putFirst H3 (F ^ ⅋ G ^).
       cutH Hi H3...
       rewrite <- Permutation_midle...
     + checkPermutationCases H.
       rewrite H5.
       LL2store F0 (M++x).
       rewrite H in H2.
       assert(LL2 S n |-- F0::B; (F ⊗ G) :: M ->
            LL2 n0 |-- F0::B; (F ⊗ G)^::x ->
            LL2 |-- F0::B; M++x).
       eapply CH...
       apply H3...
       apply LL2weakeningN...
     + LL2copy F0.
       putFirst H2 (dual (F ⊗ G)).
       cutH Hi H2...
       rewrite <- Permutation_midle... 
    + checkPermutationCases H.
        rewrite H3.
        rewrite <- H4.
        LL2tensor F G (N++x0) N0;try solvell2.
        rewrite H in H0.
        putFirst H0 C.
        cutH H0 Hj...
       rewrite Permutation_app_comm...
       rewrite H3.
       rewrite <- H4...
       LL2tensor F G M0 (N++x0);try solvell2.
       rewrite H in H1.
       putFirst H1 C.
       cutH H1 Hj...
       rewrite Permutation_app_comm...
* checkPermutationCases H...
    +  rewrite <- H3 in H0.
   clear H3.
     assert(LL2 n |-- F::B; M ->
            LL2 j |-- B; (? F) ^::N ->
            LL2 |-- B; M++N).
     eapply CH... 
     apply H...
    +     
    rewrite H2.
       LL2store F (x++N).
       rewrite H in H0.
       apply @LL2weakeningN with (F:=F) in Hj.
       cutH H0 Hj... 
  
    * inversion Hj...
     + checkPermutationCases H.
     + checkPermutationCases H.
         rewrite H1.
         LL2top x.
    + checkPermutationCases H.
       rewrite H3.
       LL2plus1 F0 G x.
       rewrite H in H0...
       putFirst H0 (? F ^).
       cutH Hi H0...
     + checkPermutationCases H.
       rewrite H3.
       LL2plus2 F0 G x.
       rewrite H in H0...
       putFirst H0 (? F ^).
       cutH Hi H0...
    + checkPermutationCases H.
       rewrite H4.
       LL2with F0 G x.
       rewrite H in H0.
       putFirst H0 (? F ^).
       cutH Hi H0...
       rewrite H in H1.
       putFirst H1 (? F ^).
       cutH Hi H1...         
   + checkPermutationCases H.
       rewrite H3.
       LL2bot x.
       rewrite H in H0...
       cutH Hi H0...
     + checkPermutationCases H.
       rewrite H3. 
       LL2par F0 G x.
       rewrite H in H0.
       putFirst H0 (? F ^).
       cutH Hi H0...
     + checkPermutationCases H.
       checkPermutationCases H.
       rewrite H4.
       rewrite <- H5.
       LL2tensor F0 G x0 N0;try solvell2.
       rewrite H in H0...
       putFirst H0 (? F ^ ).
       cutH Hi H0...
       
       rewrite H4.
       rewrite <- H5.
       LL2tensor F0 G M x0;try solvell2.
       rewrite H in H1...
       putFirst H1 (? F ^).
       cutH Hi H1...
 
     + checkPermutationCases H.
        inversion H3...
       assert(LL2 n0 |-- F ^ :: B; M ->
            LL2 S n |-- B; [! F ^ ^] ->
            LL2 |-- B; M++[]).
       eapply CH...
       rewrite DualComplexity.
       simpl. rewrite <- ng_involutive...
       rewrite H4...
       
       rewrite H3.
       LL2store F0 x.
       rewrite H in H0.
       eapply @LL2weakeningN with (F:=F0) in Hi. 
       cutH Hi H0...
       
     + LL2copy F0.
       putFirst H0 (dual (! F)).
       cutH Hi H0...
    *  LL2copy F. 
       putFirst H0 C.
       cutH H0 Hj...
Qed. 

End CutLElimination.
